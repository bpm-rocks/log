#!/usr/bin/env bash

. bpm
bpm::include array
bpm::include string

# This logging function helps diagnose errors or provide additional details
# about what's happening in your scripts.  Use this to log every action that is
# performed.  Debug output can be enabled by setting the `DEBUG` environment
# variable.  When enabled, debug output is written to `stderr` and are also
# passed to `log::toFile` so they could be written to a log file. This also
# will colorize the output when the `LOG_COLOR` environment variable is set to
# a non-empty string.
#
# $@         - The message to log.  Arguments are joined into one line.
# $DEBUG     - Controls if logging is enabled and where it's enabled.
# $LOG_COLOR - When set to non-empty string, ANSI color is enabled.
#
# When the DEBUG environment variable is not set, debug is disabled.  If DEBUG
# is set to `*`, `all` or `true`, this always logs.  In all other cases, DEBUG
# is assumed to be either a name of a function or a list of function names that
# should have debug logging enabled.  When FUNCNAME lists one of these
# functions, logging will happen.  This means you can turn on logging for one
# function and logging is enabled for that function and for all code that the
# function will execute, so child functions will also write debug output.
#
# Writing to `stderr` is intentional.  This way you can enable debugging and
# still get valid output captured.
#
# Examples
#
#   # Forcibly disable all logging.
#   DEBUG= ./thing
#
#   # Enable all debugging (two methods).
#   DEBUG=true ./thing
#   DEBUG="*" ./thing
#
#   # Enable logging for a function named "doMagic".
#   DEBUG=doMagic ./thing
#
#   # Enable logging for the functions "rainbow", "pony" and "unicorn".
#   DEBUG="rainbow pony unicorn" ./thing
#
#   # Enable debug logging for all subsequent commands.
#   export DEBUG=true
#   ./thing1
#   ./thing2
#
# Returns nothing.
log::debug() {
    # Do not log unless DEBUG environment variable is set.
    [[ -z "${DEBUG-}" ]] || (
        set +x
        # Disable debug in this function.  Note: this function uses a subshell!

        local content list name output

        array::join content " " "$@" || return $?
        string::prefixLines output "DEBUG: " "$content" || return $?

        if [[ -n "${LOG_COLOR-}" ]]; then
            output=$'\E[90;1m'"$output"$'\E[0m'
        fi

        # Check if debugging is enabled for everything
        if [[ "$DEBUG" == "*" ]] || [[ "$DEBUG" == "true" ]]; then
            log::toFile "DEBUG" "$content" || return $?
            echo "$output" >&2

            return
        fi

        #: Here is the more complex checking if any value in the DEBUG variable
        #: is in the FUNCNAME array.
        list="$DEBUG"

        while [[ -n "$list" ]]; do
            name=${DEBUG%% *}
            list=${list#* }

            if [[ "$list" == "$name" ]]; then
                list=""
            fi

            if [[ -n "$name" ]] && [[ ${#FUNCNAME[@]} -gt 0 ]]; then
                if array::contains "$name" "${FUNCNAME[@]}"; then
                    log::toFile "DEBUG" "$content" || return $?
                    echo "$output" >&2

                    return
                fi
            fi
        done
    )
}


# Logging function for errors.  Use this to log error messages right before you
# exit the program or return a failure.  All messages are written to `stderr`.
# Log messages are also passed to the `log::toFile` function to be logged to a
# file.  (See `log::toFile` for information about log files.) This also
# will colorize the output when the `LOG_COLOR` environment variable is set to
# a non-empty string.
#
# $@         - The message to log.  Arguments are joined into one line.
# $LOG_COLOR - Colorizes output when set to a non-empty string.
#
# Examples
#
#    log::error "Could not find some vital thing"
#
#    exit 1
#
# Returns nothing.
log::error() {
    (
        set +x
        # Disable debug in this function.  Note: this function uses a subshell!

        local content output

        array::join content " " "$@" || return $?
        log::toFile "ERROR" "$content" || return $?
        string::prefixLines output "ERROR: " "$content" || return $?

        if [[ -n "${LOG_COLOR-}" ]]; then
            output=$'\E[41;37;1m'"$output"$'\E[0m'
        fi

        echo "$output" >&2
    )
}


# Writes an informational message to the logging system.  Informational
# messages are written to `stdout` unless `$LOG_QUIET` is set to a non-empty
# value.  The message is also sent to `log::toFile` for possible output to a
# log file.  See `log::toFile` for information regarding logfiles.  When
# `$LOG_COLOR` is set to a non-empty string, the output is also colorized.
#
# $@          - The message to write.  Arguments are joined into one line.
# $LOG_COLOR  - When set to a non-empty value, the output is colorized.
# $_LOG_QUIET - When set to a non-empty value, the output is suppressed.
#
# Returns nothing.
log::info() {
    (
        set +x
        # Disable debug in this function.  Note: this function uses a subshell!

        local content output

        array::join content " " "$@" || return $?
        log::toFile INFO "$content" || return $?

        if [[ -z "${LOG_QUIET-}" ]]; then
            string::prefixLines output "INFO: " "$content" || return $?

            if [[ -n "${LOG_COLOR-}" ]]; then
                output=$'\E[32m'"$output"$'\E[0m'
            fi

            echo "$output"
        fi
    )
}


# Write a log message to a file or to a logging system.  Used by `log::debug`,
# `log::info`, `log::warn` and `log::error`.  Should not be used directly.
#
# $1       - Log level. One of ERROR WARN INFO DEBUG.
# $2       - The message to write.
# $LOGFILE - Destination for log messages.
#
# Uses the environment variable `$LOGFILE` to determine where to log
# messages.  Will write a timestamped messsage to that file, creating the file
# if necessary.
#
# If `$LOGFILE` starts with "syslog:", this will use the `logger` command to
# write a line to syslogd.  The facility defaults to user, but you can use any
# facility; for example you can use the mail facility by setting
# `LOGFILE="syslog:mail"`.  Additionally you can set a the tag by adding a
# second ":" followed by the desired tag; for example you can set the tag to
# myapp by setting `LOGFILE="syslog::myapp".
#
# Otherwise, `$LOGFILE` should be set to a filename.  Messages are
# prefixed with a timestamp.
#
# Examples
#
#   # Send output to /var/log/messages
#   LOGFILE=/var/log/messages ./your-command
#
#   # Send messages to /var/log/syslog using the daemon facility
#   LOGFILE=syslog:daemon ./my-background-thing
#
#   # Send messages to syslog using the "user" facility (default) and
#   # tagging them with "awesome"
#   LOGFILE=syslog::awesome
#
# Returns nothing.
log::toFile() {
    local logLevel output facility priority tag

    logLevel=$1

    if [[ -z "${LOGFILE-}" ]]; then
        return
    fi

    if [[ "${LOGFILE:0:7}" == "syslog:" ]]; then
        facility=${LOGFILE:7}
        tag=${facility#*:}

        if [[ "$facility" == "$tag" ]]; then
            tag=""
        fi

        facility=${facility%%:*}

        if [[ -z "$facility" ]]; then
            facility="user"
        fi

        case "$logLevel" in
            ERROR)
                priority="err"
                ;;

            WARN)
                priority="warning"
                ;;

            INFO)
                priority="info"
                ;;

            DEBUG)
                priority="debug"
                ;;
        esac

        loggerCmd=(logger -p "$facility"."$priority") || return $?

        if [[ -n "$tag" ]]; then
            loggerCmd[${#loggerCmd[@]}]=-t
            loggerCmd[${#loggerCmd[@]}]=$tag
        fi

        loggerCmd[${#loggerCmd[@]}]=--
        loggerCmd[${#loggerCmd[@]}]=$2
        "${loggerCmd[@]}"
    elif [[ -n "${LOGFILE-}" ]]; then
        string::prefixLines output "$(date -Iseconds) $logLevel: " "$2" || return $?
        echo "$output" >> "$WICK_LOGFILE"
    fi
}


# Logging for warnings, such as when problems are detected and they aren't
# severe enough to warrant an error and termination of the function.  Warning
# messages are always written to `stderr`.  See `log::toFile` for information
# about writing log messages to files.  This also colorizes the output when
# `$LOG_COLOR` is set to a non-empty value.
#
# $@         - The text to log.  Arguments are appended into a single line.
# $LOG_COLOR - When set to a non-empty string the output is colorized.
#
# Examples
#
#   if [[ -f /some/file ]]; then
#       log::warn "File exists when it should not."
#       rm /some/file
#   fi
#
# Returns nothing.
log::warn() {
    (
        set +x
        # Disable debug in this function.  Note: this function uses a subshell!

        local content output

        array::join content " " "$@" || return $?
        log::toFile "WARN" "$content" || return $?
        string::prefixLines output "WARN: " "$content" || return $?

        if [[ -n "${LOG_COLOR-}" ]]; then
            output=$'\E[33;1m'"$output"$'\E[0m'
        fi

        echo "$output" >&2
    )
}
